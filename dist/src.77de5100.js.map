{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"src.77de5100.js","sourceRoot":"../src","sourcesContent":["// TODO: change to Node require pattern\nimport Api = require(\"./api\");\nimport Extract = require(\"./extract\");\n\n// TODO: change to use Node ... for fetching\n\n// fetch api\nconst handleRequest = async (url: string): Promise<object> => {\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data;\n};\n\n/**\n * handleRailsData - loop each rail from rails schema and fetch complete data for each from api\n * @param railsSchema - basic rails data (id's) from initial DAZN api call\n * @param prams - custom prams collected by user input on form\n * @returns railsData - data returned from DAZN api on rail\n */\nconst handleRailsData = async (\n  railsSchema: Array<object>,\n  prams: Prams\n): Promise<object> => {\n  const getRailData = railsSchema.map(async (rail: { Id: string }) => {\n    const railsUrl = Api.rail(rail.Id, prams.country);\n    const railData = await handleRequest(railsUrl).then((data) => data);\n    return railData;\n  });\n\n  const railsData = await Promise.all(getRailData);\n  return railsData;\n};\n\n/**\n * getData - process basic page schema to get rails data\n * @param prams - custom prams collected by user input on form\n * @returns railsData - complete static data for a page\n */\nconst getData = async (prams) => {\n  const railsUrl = Api.railsSchema(prams.country);\n  const railsSchema = await handleRequest(railsUrl).then(\n    (data: { Rails: object[] }) => data.Rails\n  );\n\n  const railsData = await handleRailsData(railsSchema, prams);\n  return railsData;\n};\n\n/**\n * addImages - generate image urls from id's\n * @param data - custom json data created from previous api calls\n * @param prams - custom prams collected by user input on form\n * @returns data - added image urls to custom json data created from previous api calls\n */\nconst addImages = (data, prams) => {\n  const { image_quality, image_width, image_height, image_format } = prams;\n  data.forEach((rail) => {\n    rail.tiles.forEach((tile: { image: string }) => {\n      const id = tile.image;\n      tile.image = Api.image(\n        id,\n        image_quality,\n        image_width,\n        image_height,\n        image_format\n      );\n    });\n  });\n  return data;\n};\n\n/**\n * processRequest - controller function\n * @param event - handle form submission\n */\nconst processRequest = async (event) => {\n  event.preventDefault();\n  const prams = handleForm(event.target);\n  const rawData = await getData(prams);\n  const basicData = Extract(rawData);\n  const data = addImages(basicData, prams);\n  print(data);\n};\n\n// TODO: what values do we need from the form to make a request? These will need to the made available via another means into NPM package (i.e args).\n/**\n * handleForm - serialize form data and add values from form to default prams\n * @param form - form data object\n * @returns prams - custom prams collected by user input on form\n */\ninterface Prams {\n  country: string;\n  rail_id: string;\n  image_id: string;\n}\n\ninterface Images {\n  image_quality: number;\n  image_width: number;\n  image_height: number;\n  image_format: string;\n}\nconst handleForm = (form) => {\n  const formData: any = new FormData(form);\n  const formVales = Object.fromEntries(formData);\n  const prams: Prams = { ...Api.prams, ...formVales };\n  return prams;\n};\n\n// TODO: scrap form\n\n/**\n * Setup form submission handling\n */\nconst form = document.querySelector(\"#form\");\nform.addEventListener(\"submit\", processRequest, false);\n\n// TODO: generate output - json file (and where) or just data?\n\n// TODO: does it need incremental feedback (i.e. console.logs)?\n\nconst print: any = (json) => {\n  document.querySelector(\"#json\").innerHTML = JSON.stringify(json, null, 2);\n};\n"]}